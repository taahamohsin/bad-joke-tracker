{"version":3,"sources":["RatingForm.jsx","utils.js","App.jsx","UserForm.jsx","Admin.jsx","Jokes.jsx","Menu.jsx","Routes.jsx","serviceWorker.js","index.js"],"names":["visible","onCancel","onSubmit","selectedUser","useState","ratings","setRatings","value","setValue","Form","useForm","form","useEffect","a","fetch","process","raw","json","data","console","log","title","firstName","okText","onOk","validateFields","then","values","id","resetFields","catch","info","layout","name","Item","label","rules","required","message","count","length","tooltips","map","rating","description","onChange","find","allowClear","TextArea","Content","Layout","Header","toSentenceCase","str","spaced","replace","charAt","toUpperCase","slice","App","userData","setUserData","showModal","setShowModal","setSelectedUser","button","user","type","shape","icon","EditTwoTone","onClick","transformDataByRank","sort","first","second","score","imgUrl","rest","index","rank","actions","fetchData","tableColumns","Object","keys","filter","col","includes","key","dataIndex","method","headers","body","JSON","stringify","userId","ratingId","columns","dataSource","Admin","Column","Table","ColumnGroup","Jokes","jokeData","setJokeData","reverse","menuItems","Nav","history","useHistory","theme","mode","defaultSelectedKeys","item","push","Routes","Menu","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"8YAQe,cAAoD,IAAjDA,EAAgD,EAAhDA,QAASC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,aAAmB,EAClCC,mBAAS,IADyB,mBACzDC,EADyD,KAChDC,EADgD,OAEtCF,mBAAS,MAF6B,mBAEzDG,EAFyD,KAElDC,EAFkD,OAGjDC,IAAKC,UAAbC,EAHyD,oBAKhEC,qBAAU,WACR,sBAAC,8BAAAC,EAAA,sEACmBC,MAAM,GAAD,OCfRC,GDeQ,aADxB,cACOC,EADP,gBAEoBA,EAAIC,OAFxB,OAEOC,EAFP,OAGCZ,EAAWY,GAHZ,0CAAD,KAKC,IAUH,OAJAN,qBAAU,WACRO,QAAQC,IAAI,MAAOb,KAClB,CAACA,IAGF,kBAAC,IAAD,CACAc,MAAK,wBAAmBlB,GAAgBA,EAAamB,UAAhD,iBACLtB,QAASA,EACTuB,OAAO,SACPtB,SAAUA,EACVuB,KAAM,WACJb,EACCc,iBACAC,MAAK,SAAAC,GACJzB,EAAS,2BAAIyB,GAAL,IAAaC,GAAIrB,GAASA,EAAMqB,MACxC3B,IACAU,EAAKkB,iBAENC,OAAM,SAAAC,GACLZ,QAAQC,IAAI,mBAAoBW,QAIlC,kBAAC,IAAD,CACEpB,KAAMA,EACNqB,OAAO,WACPC,KAAK,gBAEL,kBAAC,IAAKC,KAAN,CACED,KAAK,SACLE,MAAM,SACNC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,sDAIb,kBAAC,IAAD,CACEC,MAAOlC,EAAQmC,OACfC,SAAUpC,EAAQqC,KAAI,SAAAC,GAAM,OAC1B,kBAAC,WAAD,KACE,4BAAKA,EAAOtB,OACZ,2BAAIsB,EAAOC,iBAGfrC,MAAOA,GAASA,EAAMA,MACtBsC,SAAU,SAACtC,GAAD,OAAWC,EAASH,GAAWA,EAAQyC,MAAK,SAAAH,GAAM,OAAIA,EAAOpC,QAAUA,OACjFwC,YAAU,KAGd,kBAAC,IAAKb,KAAN,CACED,KAAK,QACLE,MAAM,QACNC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,oEAIZ,kBAAC,IAAD,OAEH,kBAAC,IAAKJ,KAAN,CACED,KAAK,cACLE,MAAM,oBAEL,kBAAC,IAAMa,SAAP,UEtFKC,GAAYC,IAApBC,OAAoBD,IAAZD,SAEVG,EAAiB,SAAAC,GACrB,IAAMC,EAASD,EAAIE,QAAQ,WAAW,OACtC,OAAOD,EAAOE,OAAO,GAAGC,cAAgBH,EAAOI,MAAM,IAsFxCC,EAjFH,WAAO,IAAD,EACgBvD,mBAAS,IADzB,mBACTwD,EADS,KACCC,EADD,OAEkBzD,oBAAS,GAF3B,mBAET0D,EAFS,KAEEC,EAFF,OAGwB3D,mBAAS,MAHjC,mBAGTD,EAHS,KAGK6D,EAHL,KAKVC,EAAS,SAACC,GAAD,OACb,kBAAC,IAAD,CACAC,KAAK,UACLC,MAAM,SACNC,KAAM,kBAACC,EAAA,EAAD,MACNC,QAAS,WACPR,GAAa,GACbC,EAAgBE,OAKdM,EAAsB,SAACtD,GAG3B,OAFAA,EAAKuD,MAAK,SAACC,EAAOC,GAAR,OAAmBA,EAAOC,MAAQF,EAAME,SAC9B1D,EAAKwB,KAAI,cAAEmC,OAAF,IAAaC,EAAb,gDAA4BA,MACtCpC,KAAI,SAACwB,EAAMa,GAAP,mBAAC,aACtBC,KAAMD,EAAQ,GAAOb,GADA,IACMe,QAAShB,EAAOC,SAIzCgB,EAAS,uCAAG,8BAAArE,EAAA,sEACEC,MAAM,GAAD,ODzCNC,GCyCM,WADP,cACVC,EADU,gBAEGA,EAAIC,OAFP,OAEVC,EAFU,OAGhB2C,EAAYW,EAAoBtD,IAHhB,2CAAH,qDAMfN,qBAAU,WACRsE,MACC,IAEH,IAAMC,EAAevB,GAAYA,EAASpB,QAArB,YACf4C,OAAOC,KAAKzB,EAAS,IAAI0B,QAC1B,SAACC,GAAD,OAAU,CAAC,SAAU,MAAMC,SAASD,MAAM7C,KAAI,SAAC6C,EAAKR,GAAN,MAAgB,CAC7DU,IAAKV,EACLW,UAAWH,EACXlE,MAAO+B,EAAemC,QAItBrF,EAAQ,uCAAG,WAAOyC,GAAP,iBAAA9B,EAAA,sEACTC,MAAM,GAAD,OD5DMC,GC4DN,kBAAqBZ,EAAayB,IAAM,CACjD+D,OAAQ,QACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUpD,KANR,cASPf,EAAgBe,EAAhBf,GAAOkD,EATA,YASSnC,EATT,iBAWT7B,MAAM,GAAD,ODtEMC,GCsEN,WAAsB,CAC/B4E,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAL,2BACDjB,GADC,IAEJkB,OAAQ7F,GAAgBA,EAAayB,GACrCqE,SAAUrE,OAnBC,OAsBfmC,GAAa,GACbC,EAAgB,MAChBkB,IAxBe,2CAAH,sDA2Bd,OACC,kBAAC,IAAD,KACG,kBAACjC,EAAD,KACE,kBAAC,IAAD,CAAOiD,QAASf,EAAcgB,WAAYvC,IAC1C,kBAAC,EAAD,CAAM1D,SAAUA,EAAUF,QAAS8D,EAAW7D,SAAU,kBAAM8D,GAAa,IAAQ5D,aAAcA,OCrF1F,cAAsC,IAAnCH,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAAe,EACxBE,mBAAS,IADe,gCAExBA,mBAAS,KAFe,gCAGnCK,IAAKC,WAAbC,EAH2C,oBAKlD,OACE,kBAAC,IAAD,CACAU,MAAM,oCACNrB,QAASA,EACTuB,OAAO,SACPtB,SAAUA,EACVuB,KAAM,WACJb,EACCc,iBACAC,MAAK,SAAAC,GACJzB,EAASyB,GACT1B,IACAU,EAAKkB,iBAENC,OAAM,SAAAC,GACLZ,QAAQC,IAAI,mBAAoBW,QAIlC,kBAAC,IAAD,CACEpB,KAAMA,EACNqB,OAAO,WACPC,KAAK,cAEL,kBAAC,IAAKC,KAAN,CACED,KAAK,YACLE,MAAM,aACNC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,qCAIb,kBAAC,IAAD,OAEF,kBAAC,IAAKJ,KAAN,CACED,KAAK,WACLE,MAAM,YACNC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,oCAIb,kBAAC,IAAD,UCpDFW,EAAYC,IAAZD,QAEFG,EAAiB,SAAAC,GACrB,IAAMC,EAASD,EAAIE,QAAQ,WAAW,OACtC,OAAOD,EAAOE,OAAO,GAAGC,cAAgBH,EAAOI,MAAM,IAuDxC0C,EAlDD,WAAO,IAAD,EACchG,mBAAS,IADvB,mBACXwD,EADW,KACDC,EADC,OAEgBzD,oBAAS,GAFzB,mBAEX0D,EAFW,KAEAC,EAFA,KAIZmB,EAAS,uCAAG,8BAAArE,EAAA,sEACEC,MAAM,GAAD,OHlBNC,GGkBM,WADP,cACVC,EADU,gBAEGA,EAAIC,OAFP,OAEVC,EAFU,OAGhB2C,EAAY3C,GAHI,2CAAH,qDAMfN,qBAAU,WACRsE,MACC,IAEH,IAAMC,EAAevB,GAAYA,EAASpB,QAArB,YAChB4C,OAAOC,KAAKzB,EAAS,IAAI0B,QAC1B,SAACC,GAAD,OAAU,CAAC,SAAU,SAASC,SAASD,MAAM7C,KAAI,SAAC6C,EAAKR,GAAN,MAAgB,CAChEU,IAAKV,EACLW,UAAWH,EACXlE,MAAO+B,EAAemC,QAItBrF,EAAQ,uCAAG,WAAOyB,GAAP,SAAAd,EAAA,sEACVC,MAAM,GAAD,OHrCQC,GGqCR,UAAqB,CAC9B4E,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUpE,KANP,OAQhBoC,GAAa,GACbmB,IATgB,2CAAH,sDAab,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAOgB,QAASf,EAAcgB,WAAYvC,IAC1C,kBAAC,IAAD,CACEO,KAAK,UACLI,QAAS,kBAAMR,GAAa,KAF9B,kBAMA,kBAAC,EAAD,CAAM7D,SAAUA,EAAUF,QAAS8D,EAAW7D,SAAU,kBAAM8D,GAAa,QCrDzEd,EAAYC,IAAZD,QACAoD,EAAwBC,IAAxBD,OAAQE,EAAgBD,IAAhBC,YAqCDC,EA7BD,WAAO,IAAD,EACcpG,mBAAS,MADvB,mBACXqG,EADW,KACDC,EADC,KAEZxB,EAAS,uCAAG,8BAAArE,EAAA,sEACEC,MAAM,GAAD,OJjBNC,GIiBM,WADP,cACVC,EADU,gBAEGA,EAAIC,OAFP,OAEVC,EAFU,OAGhBwF,EAAYxF,EAAKyF,WAHD,2CAAH,qDASjB,OAJE/F,qBAAU,WACRsE,MACC,IAGH,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAOiB,WAAYM,GACnB,kBAACF,EAAD,CAAalF,MAAM,iBACjB,kBAACgF,EAAD,CAAQhF,MAAM,QAAQqE,UAAU,QAAQD,IAAI,UAC5C,kBAACY,EAAD,CAAQhF,MAAM,mBAAmBqE,UAAU,cAAcD,IAAI,iBAE7D,kBAACc,EAAD,CAAalF,MAAM,8BACjB,kBAACgF,EAAD,CAAQhF,MAAM,aAAaqE,UAAU,YAAYD,IAAI,cACrD,kBAACY,EAAD,CAAQhF,MAAM,YAAYqE,UAAU,WAAWD,IAAI,kB,QC/BvDmB,EAAY,CAAC,cAAe,QAAS,SA0B5BC,EAnBH,WACV,IAAMC,EAAUC,cAChB,OACE,kBAAC,IAAD,CAAMC,MAAM,OAAOC,KAAK,aAAaC,oBAAqB,CAAC,MACxDN,EAAUlE,KAAI,SAACyE,EAAMpC,GAAP,OACb,kBAAC,IAAK7C,KAAN,CACEuD,IAAKV,EACL1D,MAAO8F,EACP5C,QAAS,WACPuC,EAAQM,KAAR,WAA0B,gBAATD,EAAyB,GAAKA,MAdpC,SAAA9D,GACrB,IAAMC,EAASD,EAAIE,QAAQ,WAAW,OACtC,OAAOD,EAAOE,OAAO,GAAGC,cAAgBH,EAAOI,MAAM,GAe5CN,CAAe+D,SChBlBhE,EAAWD,IAAXC,OAiBOkE,EAfA,WACb,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAW7D,EAAK8D,OAAK,IACrC,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWpB,EAAOqB,OAAK,IAC5C,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWhB,EAAOiB,OAAK,OCNhCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5G,MAAK,SAAA6G,GACJA,EAAaC,gBAEd1G,OAAM,SAAA2G,GACLtH,QAAQsH,MAAMA,EAAMnG,c","file":"static/js/main.fae5191f.chunk.js","sourcesContent":["import './Form.css';\n\nimport React, { Fragment, useEffect, useState } from 'react';\nimport { Form, Input, Modal, Rate } from 'antd';\nimport getBaseUrl from './utils';\n\nconst baseUrl = getBaseUrl();\n\nexport default ({ visible, onCancel, onSubmit, selectedUser }) => {\n  const [ratings, setRatings] = useState([]);\n  const [value, setValue] = useState(null);\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    (async() => {\n      const raw = await fetch(`${baseUrl}/ratings`);\n      const data = await raw.json();\n      setRatings(data);\n    })()\n  }, []);\n\n  const onChange = value => {\n    setValue(value);\n  }\n\n  useEffect(() => {\n    console.log(\"VAL\", value)\n  }, [value])\n\n  return (\n    <Modal\n    title={`Tell us about ${selectedUser && selectedUser.firstName}'s latest gem`}\n    visible={visible}\n    okText=\"Submit\"\n    onCancel={onCancel}\n    onOk={() => {\n      form\n      .validateFields()\n      .then(values => {\n        onSubmit({...values, id: value && value.id });\n        onCancel();\n        form.resetFields();\n      })\n      .catch(info => {\n        console.log('Validate Failed:', info);\n      });\n    }}\n    >\n      <Form\n        form={form}\n        layout=\"vertical\"\n        name=\"rating-modal\"\n      >\n        <Form.Item\n          name=\"rating\"\n          label=\"Rating\"\n          rules={[\n            {\n              required: true,\n              message: 'You have to select rating before you can submit.',\n            },\n          ]}\n        >\n          <Rate\n            count={ratings.length}\n            tooltips={ratings.map(rating => (\n              <Fragment>\n                <h3>{rating.title}</h3>\n                <p>{rating.description}</p>\n              </Fragment>\n            ))}\n            value={value && value.value}\n            onChange={(value) => setValue(ratings && ratings.find(rating => rating.value === value))}\n            allowClear\n          />\n        </Form.Item>\n        <Form.Item\n          name=\"title\"\n          label=\"Title\"\n          rules={[\n            {\n              required: true,\n              message: 'You have to enter a title for the joke so we know what it was.',\n            },\n          ]}\n        >\n           <Input />\n        </Form.Item>\n        <Form.Item\n          name=\"description\"\n          label=\"Optional Details\"\n        >\n           <Input.TextArea />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};","export default () => process.env.REACT_APP_BASE_URL;","import 'antd/dist/antd.css';\nimport React, { useEffect, useState } from 'react';\nimport { Button, Layout, Menu, Table } from 'antd';\nimport { DeleteTwoTone, EditTwoTone } from '@ant-design/icons';\nimport Form from './RatingForm.jsx';\nimport getBaseUrl from './utils';\nconst { Header, Content } = Layout;\n\nconst toSentenceCase = str => {\n  const spaced = str.replace(/([A-Z])/g,' $1');\n  return spaced.charAt(0).toUpperCase() + spaced.slice(1);\n};\n\nconst baseUrl = getBaseUrl();\n\nconst App = () => {\n  const [userData, setUserData] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [selectedUser, setSelectedUser] = useState(null);\n\n  const button = (user) => (\n    <Button\n    type=\"primary\"\n    shape=\"circle\"\n    icon={<EditTwoTone />}\n    onClick={() => {\n      setShowModal(true);\n      setSelectedUser(user);\n    }}\n    />\n  );\n\n  const transformDataByRank = (data) => {\n    data.sort((first, second) => second.score - first.score);\n    const displayData = data.map(({imgUrl, ...rest}) => ({...rest}));\n    return displayData.map((user, index) => ({\n      rank: index + 1 , ...user, actions: button(user)\n    }));\n  };\n\n  const fetchData = async() => {\n    const raw = await fetch(`${baseUrl}/users`);\n    const data = await raw.json();\n    setUserData(transformDataByRank(data));\n  };\n\n  useEffect(() =>  {\n    fetchData();\n  }, []);\n\n  const tableColumns = userData && userData.length && [\n     ...Object.keys(userData[0]).filter(\n       (col) => !['imgUrl', 'id'].includes(col)).map((col, index) =>({\n        key: index,\n        dataIndex: col,\n        title: toSentenceCase(col),\n       })),\n  ];\n\n  const onSubmit = async (rating) => {\n    await fetch(`${baseUrl}/users/${selectedUser.id}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(rating),\n    });\n\n    const { id, ...rest } = rating;\n\n    await fetch(`${baseUrl}/jokes/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        ...rest,\n        userId: selectedUser && selectedUser.id,\n        ratingId: id\n      }),\n    });\n    setShowModal(false);\n    setSelectedUser(null);\n    fetchData();\n  };\n\n  return (\n   <Layout>\n      <Content>\n        <Table columns={tableColumns} dataSource={userData} />\n        <Form onSubmit={onSubmit} visible={showModal} onCancel={() => setShowModal(false)} selectedUser={selectedUser} />\n      </Content>\n   </Layout>\n  );\n}\n\nexport default App;\n","import './Form.css';\n\nimport React, { Fragment, useEffect, useState } from 'react';\nimport { Form, Input, Modal} from 'antd';\n\nexport default ({ visible, onCancel, onSubmit }) => {\n  const [fName, setfName] = useState('');\n  const [lName, setlName] = useState('');\n  const [form] = Form.useForm();\n\n  return (\n    <Modal\n    title=\"Add a new user to the competition\"\n    visible={visible}\n    okText=\"Submit\"\n    onCancel={onCancel}\n    onOk={() => {\n      form\n      .validateFields()\n      .then(values => {\n        onSubmit(values);\n        onCancel();\n        form.resetFields();\n      })\n      .catch(info => {\n        console.log('Validate Failed:', info);\n      });\n    }}\n    >\n      <Form\n        form={form}\n        layout=\"vertical\"\n        name=\"user-modal\"\n      >\n        <Form.Item\n          name=\"firstName\"\n          label=\"First Name\"\n          rules={[\n            {\n              required: true,\n              message: 'The user must have a first name',\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          name=\"lastName\"\n          label=\"Last Name\"\n          rules={[\n            {\n              required: true,\n              message: 'The user must have a last name',\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};","import React, { useEffect, useState } from 'react';\nimport { Button, Layout, Input, Table } from 'antd';\nimport Form from './UserForm';\nimport getBaseUrl from './utils';\nconst { Content } = Layout;\n\nconst toSentenceCase = str => {\n  const spaced = str.replace(/([A-Z])/g,' $1');\n  return spaced.charAt(0).toUpperCase() + spaced.slice(1);\n};\n\nconst baseUrl = getBaseUrl();\n\nconst Admin = () => {\n  const [userData, setUserData] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n\n  const fetchData = async() => {\n    const raw = await fetch(`${baseUrl}/users`);\n    const data = await raw.json();\n    setUserData(data);\n  };\n\n  useEffect(() =>  {\n    fetchData();\n  }, []);\n\n  const tableColumns = userData && userData.length && [\n    ...Object.keys(userData[0]).filter(\n      (col) => !['imgUrl', 'score'].includes(col)).map((col, index) =>({\n       key: index,\n       dataIndex: col,\n       title: toSentenceCase(col),\n      })),\n ];\n\n const onSubmit = async (values) => {\n  await fetch(`${baseUrl}/users`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(values),\n  });\n  setShowModal(false);\n  fetchData();\n}\n\n\n  return (\n    <Content>\n      <Table columns={tableColumns} dataSource={userData} />\n      <Button\n        type=\"primary\"\n        onClick={() => setShowModal(true)}\n      >\n        Add a new user\n        </Button>\n      <Form onSubmit={onSubmit} visible={showModal} onCancel={() => setShowModal(false)} />\n    </Content>\n  );\n}\n\nexport default Admin;","import React, { useEffect, useState } from 'react';\nimport { Button, Layout, Menu, Table } from 'antd';\n\nimport getBaseUrl from './utils';\n\nconst { Content } = Layout;\nconst { Column, ColumnGroup } = Table;\n\nconst baseUrl = getBaseUrl();\nconst toSentenceCase = str => {\n  const spaced = str.replace(/([A-Z])/g,' $1');\n  return spaced.charAt(0).toUpperCase() + spaced.slice(1);\n};\n\nconst Jokes = () => {\n  const [jokeData, setJokeData] = useState(null);\n  const fetchData = async () => {\n    const raw = await fetch(`${baseUrl}/jokes`);\n    const data = await raw.json();\n    setJokeData(data.reverse());\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n\nreturn (\n  <Layout>\n    <Content>\n      <Table dataSource={jokeData}>\n      <ColumnGroup title=\"Bad Joke Info\">\n        <Column title=\"Title\" dataIndex=\"title\" key=\"title\" />\n        <Column title=\"Optional Details\" dataIndex=\"description\" key=\"description\" />\n      </ColumnGroup>\n        <ColumnGroup title=\"The Joke-Cracker's Details\">\n          <Column title=\"First Name\" dataIndex=\"firstName\" key=\"firstName\" />\n          <Column title=\"Last Name\" dataIndex=\"lastName\" key=\"lastName\" />\n        </ColumnGroup>\n      </Table>\n    </Content>\n  </Layout>)\n  ;\n};\n\nexport default Jokes;\n","import React from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport { Menu } from 'antd';\n\nconst menuItems = ['leaderboard', 'jokes', 'admin'];\n\nconst toSentenceCase = str => {\n  const spaced = str.replace(/([A-Z])/g,' $1');\n  return spaced.charAt(0).toUpperCase() + spaced.slice(1);\n};\n\nconst Nav = () => {\n  const history = useHistory();\n  return (\n    <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['0']}>\n      {menuItems.map((item, index) => (\n        <Menu.Item\n          key={index}\n          title={item}\n          onClick={() => {\n            history.push(`/${item === 'leaderboard' ? '' : item}`)\n          }}\n        >\n          {toSentenceCase(item)}\n        </Menu.Item>\n      ))}\n    </Menu>\n  );\n}\n\nexport default Nav;\n\n\n\n","import React from \"react\";\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { Layout } from 'antd';\nimport App from './App';\nimport Admin from './Admin';\nimport Jokes from './Jokes';\nimport Menu from './Menu';\nconst { Header } = Layout;\n\nconst Routes = () => {\n  return (\n    <BrowserRouter>\n      <Layout>\n        <Header>\n          <Menu />\n        </Header>\n        <Route path='/' component={App} exact />\n        <Route path='/admin' component={Admin} exact />\n        <Route path='/jokes' component={Jokes} exact />\n      </Layout>\n    </BrowserRouter>\n  );\n};\n\nexport default Routes;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Routes.jsx'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}