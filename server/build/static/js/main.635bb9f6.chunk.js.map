{"version":3,"sources":["RatingForm.jsx","utils.js","DeleteConfirmation.jsx","App.jsx","UserForm.jsx","Admin.jsx","Jokes.jsx","Menu.jsx","Routes.jsx","serviceWorker.js","index.js"],"names":["visible","onCancel","onSubmit","selectedUser","useState","ratings","setRatings","value","setValue","Form","useForm","form","useEffect","a","fetch","process","raw","json","data","title","firstName","okText","onOk","validateFields","then","values","id","resetFields","catch","info","console","log","layout","name","Item","label","rules","required","message","count","length","tooltips","map","rating","description","onChange","find","allowClear","TextArea","DeleteConfirmation","Modal","confirm","isVisible","prompt","okButtonProps","danger","centered","Content","Layout","Header","toSentenceCase","str","spaced","replace","charAt","toUpperCase","slice","App","userData","setUserData","showModal","setShowModal","showConfirmation","setShowConfirmation","setSelectedUser","editButton","user","type","shape","icon","EditTwoTone","onClick","deleteButton","DeleteTwoTone","transformDataByRank","sort","first","second","score","imgUrl","rest","index","key","rank","actions","fetchData","tableColumns","Object","keys","filter","col","includes","dataIndex","method","headers","body","JSON","stringify","userId","ratingId","onDelete","columns","dataSource","Admin","Column","Table","ColumnGroup","Jokes","jokeData","setJokeData","selectedJoke","setSelectedJoke","reverse","render","_","record","joke","menuItems","Nav","history","useHistory","theme","mode","defaultSelectedKeys","item","push","Routes","Menu","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.635bb9f6.chunk.js","sourcesContent":["import './Form.css';\n\nimport React, { Fragment, useEffect, useState } from 'react';\nimport { Form, Input, Modal, Rate } from 'antd';\nimport getBaseUrl from './utils';\n\nconst baseUrl = getBaseUrl();\n\nexport default ({ visible, onCancel, onSubmit, selectedUser }) => {\n  const [ratings, setRatings] = useState([]);\n  const [value, setValue] = useState(null);\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    (async() => {\n      const raw = await fetch(`${baseUrl}/ratings`);\n      const data = await raw.json();\n      setRatings(data);\n    })()\n  }, []);\n\n  return (\n    <Modal\n    title={`Tell us about ${selectedUser && selectedUser.firstName}'s latest gem`}\n    visible={visible}\n    okText=\"Submit\"\n    onCancel={onCancel}\n    onOk={() => {\n      form\n      .validateFields()\n      .then(values => {\n        onSubmit({...values, id: value && value.id });\n        onCancel();\n        form.resetFields();\n      })\n      .catch(info => {\n        console.log('Validate Failed:', info);\n      });\n    }}\n    >\n      <Form\n        form={form}\n        layout=\"vertical\"\n        name=\"rating-modal\"\n      >\n        <Form.Item\n          name=\"rating\"\n          label=\"Rating\"\n          rules={[\n            {\n              required: true,\n              message: 'You have to select rating before you can submit.',\n            },\n          ]}\n        >\n          <Rate\n            count={ratings.length}\n            tooltips={ratings.map(rating => (\n              <Fragment>\n                <h3>{rating.title}</h3>\n                <p>{rating.description}</p>\n              </Fragment>\n            ))}\n            value={value && value.value}\n            onChange={(value) => setValue(ratings && ratings.find(rating => rating.value === value))}\n            allowClear\n          />\n        </Form.Item>\n        <Form.Item\n          name=\"title\"\n          label=\"Title\"\n          rules={[\n            {\n              required: true,\n              message: 'You have to enter a title for the joke so we know what it was.',\n            },\n          ]}\n        >\n           <Input />\n        </Form.Item>\n        <Form.Item\n          name=\"description\"\n          label=\"Optional Details\"\n        >\n           <Input.TextArea />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};","export default () => process.env.REACT_APP_BASE_URL;","import React from 'react';\nimport { Modal } from 'antd';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\n\nconst { confirm } = Modal;\n\nconst DeleteConfirmation = ({ onSubmit, onCancel, isVisible, title, prompt }) => (\n  <Modal\n    title={title}\n    visible={isVisible}\n    okText=\"Yes\"\n    onCancel={onCancel}\n    onOk={() => {\n      onSubmit();\n      onCancel();\n    }}\n    okButtonProps={{ danger: true }}\n    centered\n    >\n      <p>\n        {prompt}\n      </p>\n    </Modal>\n)\n\n\nexport default DeleteConfirmation;","import 'antd/dist/antd.css';\nimport React, { useEffect, useState, Fragment } from 'react';\nimport { Button, Layout, Menu, Table, Space } from 'antd';\nimport { DeleteTwoTone, EditTwoTone } from '@ant-design/icons';\nimport Form from './RatingForm.jsx';\nimport DeleteConfirmation from './DeleteConfirmation';\nimport getBaseUrl from './utils';\nconst { Header, Content } = Layout;\n\nconst toSentenceCase = str => {\n  const spaced = str.replace(/([A-Z])/g,' $1');\n  return spaced.charAt(0).toUpperCase() + spaced.slice(1);\n};\n\nconst baseUrl = getBaseUrl();\n\nconst App = () => {\n  const [userData, setUserData] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const [selectedUser, setSelectedUser] = useState(null);\n\n  const editButton = (user) => (\n    <Button\n    type=\"primary\"\n    shape=\"circle\"\n    icon={<EditTwoTone />}\n    onClick={() => {\n      setShowModal(true);\n      setSelectedUser(user);\n    }}\n    />\n  );\n\n  const deleteButton = (user) => (\n    <Button\n    type=\"primary\"\n    shape=\"circle\"\n    icon={<DeleteTwoTone />}\n    onClick={() => {\n      setSelectedUser(user);\n      setShowConfirmation(true);\n    }}\n    />\n  );\n\n  const transformDataByRank = (data) => {\n    data.sort((first, second) => second.score - first.score);\n    const displayData = data.map(({imgUrl, ...rest}) => ({...rest}));\n    return displayData.map((user, index) => ({\n      key: index,\n      rank: index + 1 ,\n      ...user,\n      actions: (\n        <Space>\n          {editButton(user)}\n          {deleteButton(user)}\n        </Space>\n      )\n    }));\n  };\n\n  const fetchData = async() => {\n    const raw = await fetch(`${baseUrl}/users`);\n    const data = await raw.json();\n    setUserData(transformDataByRank(data));\n  };\n\n  useEffect(() =>  {\n    fetchData();\n  }, []);\n\n  const tableColumns = userData && userData.length && [\n     ...Object.keys(userData[0]).filter(\n       (col) => !['imgUrl', 'id', 'key'].includes(col)).map((col, index) =>({\n        key: index,\n        dataIndex: col,\n        title: toSentenceCase(col),\n       })),\n  ];\n\n  const onSubmit = async (rating) => {\n    await fetch(`${baseUrl}/users/${selectedUser.id}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(rating),\n    });\n\n    const { id, ...rest } = rating;\n\n    await fetch(`${baseUrl}/jokes/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        ...rest,\n        userId: selectedUser && selectedUser.id,\n        ratingId: id\n      }),\n    });\n    setShowModal(false);\n    setSelectedUser(null);\n    fetchData();\n  };\n\n  const onDelete = async () => {\n    await fetch(`${baseUrl}/users/${selectedUser && selectedUser.id}`, {\n      method: 'DELETE',\n    });\n    fetchData();\n  };\n\n  return (\n   <Layout>\n      <Content>\n        <Table columns={tableColumns} dataSource={userData} />\n        <Form onSubmit={onSubmit} visible={showModal} onCancel={() => setShowModal(false)} selectedUser={selectedUser} />\n        <DeleteConfirmation\n          onSubmit={onDelete}\n          onCancel={() => setShowConfirmation(false)}\n          isVisible={showConfirmation}\n          title={`Remove ${selectedUser && selectedUser.firstName}`}\n          prompt={`Are you sure you want to remove ${selectedUser && selectedUser.firstName} from the tracker? Their jokes will also be deleted as a consequence of this.`}\n        />\n      </Content>\n   </Layout>\n  );\n}\n\nexport default App;\n","import './Form.css';\n\nimport React from 'react';\nimport { Form, Input, Modal } from 'antd';\n\nexport default ({ visible, onCancel, onSubmit }) => {\n  const [form] = Form.useForm();\n\n  return (\n    <Modal\n    title=\"Add a new user to the competition\"\n    visible={visible}\n    okText=\"Submit\"\n    onCancel={onCancel}\n    onOk={() => {\n      form\n      .validateFields()\n      .then(values => {\n        onSubmit(values);\n        onCancel();\n        form.resetFields();\n      })\n      .catch(info => {\n        console.log('Validate Failed:', info);\n      });\n    }}\n    >\n      <Form\n        form={form}\n        layout=\"vertical\"\n        name=\"user-modal\"\n      >\n        <Form.Item\n          name=\"firstName\"\n          label=\"First Name\"\n          rules={[\n            {\n              required: true,\n              message: 'The user must have a first name',\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          name=\"lastName\"\n          label=\"Last Name\"\n          rules={[\n            {\n              required: true,\n              message: 'The user must have a last name',\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};","import React, { useEffect, useState } from 'react';\nimport { Button, Layout, Table } from 'antd';\nimport Form from './UserForm';\nimport getBaseUrl from './utils';\nconst { Content } = Layout;\n\nconst toSentenceCase = str => {\n  const spaced = str.replace(/([A-Z])/g,' $1');\n  return spaced.charAt(0).toUpperCase() + spaced.slice(1);\n};\n\nconst baseUrl = getBaseUrl();\n\nconst Admin = () => {\n  const [userData, setUserData] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n\n  const fetchData = async() => {\n    const raw = await fetch(`${baseUrl}/users`);\n    const data = await raw.json();\n    setUserData(data);\n  };\n\n  useEffect(() =>  {\n    fetchData();\n  }, []);\n\n  const tableColumns = userData && userData.length && [\n    ...Object.keys(userData[0]).filter(\n      (col) => !['imgUrl', 'score'].includes(col)).map((col, index) =>({\n       key: index,\n       dataIndex: col,\n       title: toSentenceCase(col),\n      })),\n ];\n\n const onSubmit = async (values) => {\n  await fetch(`${baseUrl}/users`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(values),\n  });\n  setShowModal(false);\n  fetchData();\n}\n\n\n  return (\n    <Content>\n      <Table columns={tableColumns} dataSource={userData} />\n      <Button\n        type=\"primary\"\n        onClick={() => setShowModal(true)}\n      >\n        Add a new user\n        </Button>\n      <Form onSubmit={onSubmit} visible={showModal} onCancel={() => setShowModal(false)} />\n    </Content>\n  );\n}\n\nexport default Admin;","import React, { useEffect, useState } from 'react';\nimport { Button, Layout, Table } from 'antd';\nimport { DeleteTwoTone, EditTwoTone } from '@ant-design/icons';\n\nimport DeleteConfirmation from './DeleteConfirmation';\nimport getBaseUrl from './utils';\n\n\nconst { Content } = Layout;\nconst { Column, ColumnGroup } = Table;\n\nconst baseUrl = getBaseUrl();\n\nconst Jokes = () => {\n  const [jokeData, setJokeData] = useState(null);\n  const [selectedJoke, setSelectedJoke] = useState(null);\n  const [showConfirmation, setShowConfirmation] = useState(false);\n\n  const fetchData = async () => {\n    const raw = await fetch(`${baseUrl}/jokes`);\n    const data = await raw.json();\n    setJokeData(data.reverse());\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  // const editButton = (rating) => (\n  //   <Button\n  //   type=\"primary\"\n  //   shape=\"circle\"\n  //   icon={<EditTwoTone />}\n  //   onClick={() => {\n  //     setShowModal(true);\n  //     setSelectedUser(user);\n  //   }}\n  //   />\n  // );\n\n  const deleteButton = (joke) => (\n    <Button\n    type=\"primary\"\n    shape=\"circle\"\n    icon={<DeleteTwoTone />}\n    onClick={() => {\n      setSelectedJoke(joke);\n      setShowConfirmation(true);\n    }}\n    />\n  );\n\n  const onDelete = async () => {\n    await fetch(`${baseUrl}/jokes/${selectedJoke && selectedJoke.id}`, {\n      method: 'DELETE',\n    });\n    fetchData();\n  };\n\n  return (\n    <Layout>\n      <Content>\n        <Table dataSource={jokeData}>\n        <ColumnGroup title=\"Bad Joke Info\">\n          <Column title=\"Title\" dataIndex=\"title\" key=\"title\" />\n          <Column title=\"Optional Details\" dataIndex=\"description\" key=\"description\" />\n        </ColumnGroup>\n          <ColumnGroup title=\"The Joke-Cracker's Details\">\n            <Column title=\"First Name\" dataIndex=\"firstName\" key=\"firstName\" />\n            <Column title=\"Last Name\" dataIndex=\"lastName\" key=\"lastName\" />\n          </ColumnGroup>\n          <Column title=\"Points Earned\" dataIndex=\"value\" key=\"value\" />\n          <Column title=\"Actions\" render={(_, record) => deleteButton(record)} />\n        </Table>\n        <DeleteConfirmation\n          onSubmit={onDelete}\n          onCancel={() => setShowConfirmation(false)}\n          isVisible={showConfirmation}\n          title={`Delete ${selectedJoke && selectedJoke.title}`}\n          prompt={`Are you sure want to delete ${selectedJoke && selectedJoke.title}? This action is irreversible.`}\n        />\n      </Content>\n    </Layout>\n    );\n};\n\nexport default Jokes;\n","import React from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport { Menu } from 'antd';\n\nconst menuItems = ['leaderboard', 'jokes', 'admin'];\n\nconst toSentenceCase = str => {\n  const spaced = str.replace(/([A-Z])/g,' $1');\n  return spaced.charAt(0).toUpperCase() + spaced.slice(1);\n};\n\nconst Nav = () => {\n  const history = useHistory();\n  return (\n    <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['0']}>\n      {menuItems.map((item, index) => (\n        <Menu.Item\n          key={index}\n          title={item}\n          onClick={() => {\n            history.push(`/${item === 'leaderboard' ? '' : item}`)\n          }}\n        >\n          {toSentenceCase(item)}\n        </Menu.Item>\n      ))}\n    </Menu>\n  );\n}\n\nexport default Nav;\n\n\n\n","import React from \"react\";\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { Layout } from 'antd';\nimport App from './App';\nimport Admin from './Admin';\nimport Jokes from './Jokes';\nimport Menu from './Menu';\nconst { Header } = Layout;\n\nconst Routes = () => {\n  return (\n    <BrowserRouter>\n      <Layout>\n        <Header>\n          <Menu />\n        </Header>\n        <Route path='/' component={App} exact />\n        <Route path='/admin' component={Admin} exact />\n        <Route path='/jokes' component={Jokes} exact />\n      </Layout>\n    </BrowserRouter>\n  );\n};\n\nexport default Routes;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Routes.jsx'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}